#!/bin/bash
###############################################
# Installationsskript für Smart Home Zentrale #
#                                             #
# (c) Felix Kuschel & Manuel Starz            #
###############################################
# Skript installiert Docker, Home-Assistant   #
# und MQTT-Broker uns Zigbee2Mqtt             #
###############################################
# Version: 1.0                                #
###############################################
# Variablen für Skript
# Version des Pi (3 oder 4)
PIVER=$(cat /proc/device-tree/model | cut -d' ' -f3)
# Update-Flag
UPDATE=0
# Docker-Installationsflag
DOCKER=0
# Homeassistant-Flag
HOMEASSISTANT=0
# Dependencies-Flag
DEPENDENCIES=0
# Prüfung ob Dependencies installiert sind (siehe preflightcheck)
NWM=0
APA=0
JQ=0
# Log-File
LOG=shz_install.log
#Zeitstempel
STARTTIME=$(date +%c)
TIMESTAMP=$(date +%T)
# Funktionen für Skript
# Hilfe-Funktion
show_help () {
	echo "   Smart Home Zentrale   "
    echo "---Installationsskript---"
    echo
    echo "Das Installationsskript kann mit diversen Startparametern arbeiten."
    echo "Die uebliche Syntax lautet:"
    echo "  sudo ./shz_install [-a|-d|-h|-u|-?]"
    echo
	echo " -a:   Installiert alles (Systemupdates, Dependencies, Docker, Homeassistant)"
	echo "       Impliziert -d/-h/-u"
	echo " -d:   Installiert Docker."
	echo " -h:   Installiert Homeassistant."
	echo " -u:   Führt ein Systemupdate aus."
	echo 
	# Eventuell mit -r alles entfernen?
    echo " -?:   Ruft diese Hilfeseite auf."
    echo
    echo "Der grundlegende Ablauf des Skripts wird in der Datei $LOG geloggt."
	echo
	exit 1
}
# Zeitstempel aktualisieren
get_time () {
	TIMESTAMP=$(date +%T)
}
# Update-Funktion
run_update () {
	get_time && echo "$TIMESTAMP: Führe Systemupdate durch." >>$LOG
	sudo apt-get -qq update >> $LOG
	sudo apt-get -qq upgrade -y >> $LOG
	sudo apt-get -qq autoremove -y >> $LOG
	return 0
}
# Festlegen des Machinentyps
get_piver () {
	if [[ "$PIVER" = 4 ]]; then
		MACHINE=raspberrypi4
		get_time
		echo "$TIMESTAMP: Raspberry Pi Version $PIVER erkannt." >> $LOG
	elif [[ "$PIVER" = 3 ]]; then
		MACHINE=raspberrypi3
		get_time
		echo "$TIMESTAMP: Raspberry Pi Version $PIVER erkannt." >> $LOG
	else
		# Fehlermeldung
		get_time
		echo "Skript abgebrochen. Pi-Version nicht erkannt/korrekt" >> $LOG
		exit 1
	fi
}
# Installiert die Dependencies.
install_dependencies () {
	get_time && echo "$TIMESTAMP: Installiere Dependencies." >> $LOG
	# Prüft, ob Networkmanager installiert werden muss (Siehe preflightcheck)
	if [[ "$NWM" -eq 0 ]]; then
		get_time && echo "$TIMESTAMP: Installiere Network Manager." >> $LOG
		sudo apt-get -qq install network-manager -y >> $LOG
	fi
	# Prüft, ob AppArmor installiert werden muss (Siehe preflightcheck)
	if [[ "$APA" -eq 0 ]]; then
		get_time && echo "$TIMESTAMP: Installiere AppArmor." >> $LOG
		sudo apt-get -qq install apparmor-utils -y >> $LOG
	fi
	# Prüft, ob JQ installiert werden muss (Siehe preflightcheck)
	if [[ "$JQ" -eq 0 ]]; then
		get_time && echo "$TIMESTAMP: Installiere JQ." >> $LOG
		sudo apt-get -qq install jq -y >> $LOG
	fi
	return 0
}
# Installiert Docker
install_docker () {
	get_time && echo "$TIMESTAMP: Installiere Docker." >> $LOG
	# Holt sich das Installationsskript für Docker
	curl -fsSL https://get.docker.com -o get-docker.sh >> $LOG
	# Ändert die Zugriffsrechte für das Skript
	chmod 770 get-docker.sh >> $LOG
	# Führt das Skript aus
	sudo sh get-docker.sh
	# Fügt den Standard-Nutzer der Docker-Gruppe hinzu
	sudo usermod -aG docker pi >> $LOG
	# Wartet 20s
	sleep 20s
	# Gibt 0 zurück
	return 0
}
# Installiert Home Assistant Supervised. 
# Basiert auf https://raw.githubusercontent.com/home-assistant/supervised-installer/master/installer.sh
# Version vom 29.12.2020. 
# Enthält NUR die Ausgaben für den Pi 3 und 4 und keine Konsolenausgaben/Abfragen. (silent install quasi)
# Warnungen wandern ins Log-File!
install_homeassistant () {
	get_time && echo "$TIMESTAMP: Beginne Home Assistant Supervised Installation." >> $LOG
	get_time && echo "$TIMESTAMP: Meldungen folgen auf Englisch." >> $LOG
	ARCH=$(uname -m)
	IP_ADDRESS=$(hostname -I | awk '{ print $1 }')
	BINARY_DOCKER=/usr/bin/docker
	DOCKER_REPO=homeassistant
	SERVICE_DOCKER="docker.service"
	SERVICE_NM="NetworkManager.service"
	FILE_DOCKER_CONF="/etc/docker/daemon.json"
	FILE_INTERFACES="/etc/network/interfaces"
	FILE_NM_CONF="/etc/NetworkManager/NetworkManager.conf"
	FILE_NM_CONNECTION="/etc/NetworkManager/system-connections/default"
	URL_RAW_BASE="https://raw.githubusercontent.com/home-assistant/supervised-installer/master/files"
	URL_VERSION="https://version.home-assistant.io/stable.json"
	URL_BIN_APPARMOR="${URL_RAW_BASE}/hassio-apparmor"
	URL_BIN_HASSIO="${URL_RAW_BASE}/hassio-supervisor"
	URL_DOCKER_DAEMON="${URL_RAW_BASE}/docker_daemon.json"
	URL_HA="${URL_RAW_BASE}/ha"
	URL_INTERFACES="${URL_RAW_BASE}/interfaces"
	URL_NM_CONF="${URL_RAW_BASE}/NetworkManager.conf"
	URL_NM_CONNECTION="${URL_RAW_BASE}/system-connection-default"
	URL_SERVICE_APPARMOR="${URL_RAW_BASE}/hassio-apparmor.service"
	URL_SERVICE_HASSIO="${URL_RAW_BASE}/hassio-supervisor.service"
	URL_APPARMOR_PROFILE="https://version.home-assistant.io/apparmor.txt"
	# Check env
	command -v systemctl > /dev/null 2>&1 || MISSING_PACKAGES+=("systemd")
	command -v nmcli > /dev/null 2>&1 || MISSING_PACKAGES+=("network-manager")
	command -v apparmor_parser > /dev/null 2>&1 || MISSING_PACKAGES+=("apparmor")
	command -v docker > /dev/null 2>&1 || MISSING_PACKAGES+=("docker")
	command -v jq > /dev/null 2>&1 || MISSING_PACKAGES+=("jq")
	command -v curl > /dev/null 2>&1 || MISSING_PACKAGES+=("curl")
	command -v dbus-daemon > /dev/null 2>&1 || MISSING_PACKAGES+=("dbus")
	if [ ! -z "${MISSING_PACKAGES}" ]; then
		get_time && echo "$TIMESTAMP: The following is missing on the host and needs " >> $LOG
		get_time && echo "$TIMESTAMP: to be installed and configured before running this script again" >> $LOG
		get_time && echo "$TIMESTAMP: missing:" "${MISSING_PACKAGES[@]}" >> $LOG
		exit 2
	fi
	# Check if Modem Manager is enabled
	if systemctl is-enabled ModemManager.service &> /dev/null; then
		get_time && echo "$TIMESTAMP: ModemManager service is enabled. This might cause issue when using serial devices." >> $LOG
	fi
	# Detect wrong docker logger config
	if [ ! -f "$FILE_DOCKER_CONF" ]; then
		# Write default configuration
		get_time && echo "$TIMESTAMP: Creating default docker daemon configuration $FILE_DOCKER_CONF" >> $LOG
		sudo curl -sL ${URL_DOCKER_DAEMON} > "${FILE_DOCKER_CONF}" 
		# Restart Docker service
		get_time && echo "$TIMESTAMP: Restarting docker service" >> $LOG
		sudo systemctl restart "$SERVICE_DOCKER"
	else
		STORAGE_DRIVER=$(docker info -f "{{json .}}" | jq -r -e .Driver)
		LOGGING_DRIVER=$(docker info -f "{{json .}}" | jq -r -e .LoggingDriver)
		if [[ "$STORAGE_DRIVER" != "overlay2" ]]; then 
			get_time && echo "$TIMESTAMP: Docker is using $STORAGE_DRIVER and not 'overlay2' as the storage driver, this is not supported." >> $LOG
		fi
		if [[ "$LOGGING_DRIVER"  != "journald" ]]; then 
			get_time && echo "$TIMESTAMP: Docker is using $LOGGING_DRIVER and not 'journald' as the logging driver, this is not supported." >> $LOG
		fi
	fi
	# Check dmesg access
	if [[ "$(sysctl --values kernel.dmesg_restrict)" != "0" ]]; then
		get_time && echo "$TIMESTAMP: Fix kernel dmesg restriction" >> $LOG
		echo 0 > /proc/sys/kernel/dmesg_restrict
		echo "kernel.dmesg_restrict=0" >> /etc/sysctl.conf
	fi
	# Create config for NetworkManager
	get_time && echo "$TIMESTAMP: Creating NetworkManager configuration" >> $LOG
	sudo curl -sL "${URL_NM_CONF}" > "${FILE_NM_CONF}"
	if [ ! -f "$FILE_NM_CONNECTION" ]; then
		sudo curl -sL "${URL_NM_CONNECTION}" > "${FILE_NM_CONNECTION}"
	fi
	get_time && echo "$TIMESTAMP: Changes are needed to the /etc/network/interfaces file" >> $LOG
	get_time && echo "$TIMESTAMP: Replacing /etc/network/interfaces" >> $LOG
	sudo curl -sL "${URL_INTERFACES}" > "${FILE_INTERFACES}";
	get_time && echo "$TIMESTAMP: Restarting NetworkManager" >> $LOG
	sudo systemctl restart "${SERVICE_NM}"
	PREFIX=${PREFIX:-/usr}
	SYSCONFDIR=${SYSCONFDIR:-/etc}
	DATA_SHARE=${DATA_SHARE:-$PREFIX/share/hassio}
	CONFIG=$SYSCONFDIR/hassio.json
	# Generate hardware options
	# Hier nur armv7l, alles andere auf Pi nicht möglich...
	HASSIO_DOCKER="$DOCKER_REPO/armhf-hassio-supervisor"
	### Main
	# Init folders
	if [ ! -d "$DATA_SHARE" ]; then
		mkdir -p "$DATA_SHARE"
	fi
	# Read infos from web
	HASSIO_VERSION=$(curl -s $URL_VERSION | jq -e -r '.supervisor')
	##
	# Write configuration
	sudo cat > "$CONFIG" <<- EOF
	{
		"supervisor": "${HASSIO_DOCKER}",
		"machine": "${MACHINE}",
		"data": "${DATA_SHARE}"
	}
	EOF
	##
	# Pull supervisor image
	get_time && echo "$TIMESTAMP: Install supervisor Docker container" >> $LOG
	docker pull "$HASSIO_DOCKER:$HASSIO_VERSION" > /dev/null
	docker tag "$HASSIO_DOCKER:$HASSIO_VERSION" "$HASSIO_DOCKER:latest" > /dev/null
	##
	# Install Hass.io Supervisor
	get_time && echo "$TIMESTAMP: Install supervisor startup scripts" >> $LOG
	sudo curl -sL ${URL_BIN_HASSIO} > "${PREFIX}/sbin/hassio-supervisor"
	sudo curl -sL ${URL_SERVICE_HASSIO} > "${SYSCONFDIR}/systemd/system/hassio-supervisor.service"
	sed -i "s,%%HASSIO_CONFIG%%,${CONFIG},g" "${PREFIX}"/sbin/hassio-supervisor
	sed -i -e "s,%%BINARY_DOCKER%%,${BINARY_DOCKER},g" \
       -e "s,%%SERVICE_DOCKER%%,${SERVICE_DOCKER},g" \
       -e "s,%%BINARY_HASSIO%%,${PREFIX}/sbin/hassio-supervisor,g" \
       "${SYSCONFDIR}/systemd/system/hassio-supervisor.service"
	chmod a+x "${PREFIX}/sbin/hassio-supervisor"
	systemctl enable hassio-supervisor.service > /dev/null 2>&1;
	#
	# Install Hass.io AppArmor
	get_time && echo "$TIMESTAMP: Install AppArmor scripts" >> $LOG
	mkdir -p "${DATA_SHARE}/apparmor"
	sudo curl -sL ${URL_BIN_APPARMOR} > "${PREFIX}/sbin/hassio-apparmor"
	sudo curl -sL ${URL_SERVICE_APPARMOR} > "${SYSCONFDIR}/systemd/system/hassio-apparmor.service"
	sudo curl -sL ${URL_APPARMOR_PROFILE} > "${DATA_SHARE}/apparmor/hassio-supervisor"
	sed -i "s,%%HASSIO_CONFIG%%,${CONFIG},g" "${PREFIX}/sbin/hassio-apparmor"
	sed -i -e "s,%%SERVICE_DOCKER%%,${SERVICE_DOCKER},g" \
		-e "s,%%HASSIO_APPARMOR_BINARY%%,${PREFIX}/sbin/hassio-apparmor,g" \
		"${SYSCONFDIR}/systemd/system/hassio-apparmor.service"
	chmod a+x "${PREFIX}/sbin/hassio-apparmor"
	sudo systemctl enable hassio-apparmor.service > /dev/null 2>&1;
	sudo systemctl start hassio-apparmor.service
	##
	# Init system
	get_time && echo "$TIMESTAMP: Start Home Assistant Supervised" >> $LOG
	sudo systemctl start hassio-supervisor.service
	##
	# Setup CLI
	get_time && echo "$TIMESTAMP: Installing the 'ha' cli" >> $LOG
	sudo curl -sL ${URL_HA} > "${PREFIX}/bin/ha"
	sudo chmod a+x "${PREFIX}/bin/ha"
	# Einfach mal 5 Minuten warten...
	sleep 5m
	get_time && echo "$TIMESTAMP: Home Assistant supervised is now installed" >> $LOG
	get_time && echo "$TIMESTAMP: First setup will take some time, when it's ready you can reach it here:" >> $LOG
	get_time && echo "$TIMESTAMP: http://${IP_ADDRESS}:8123" >> $LOG
	echo "Home Assistant supervised is now installed" 
	echo "First setup will take some time, when it's ready you can reach it here:"
	echo "http://${IP_ADDRESS}:8123"
	return 1
}
# Systemprüfung vor Installationsstart
preflightcheck () {
	get_time && echo "$TIMESTAMP: Prüfe System..." >> $LOG
	if [[ "$DOCKER" -eq 0 ]] && [[ "$DEPENDENCIES" -eq 0 ]] && [[ "$HOMEASSISTANT" -eq 0 ]] && [[ "$UPDATE" -eq 0 ]]; then
		get_time && echo "$TIMESTAMP: Keine Flags gesetzt. Zeige Hilfe und breche Skript ab." >> $LOG
		show_help
		exit 1
	fi
	# Prüfe Docker
	get_time && echo "$TIMESTAMP: Prüfe Docker-Installation..." >> $LOG
	command -v "docker" >/dev/null 2>&1
	if [[ $? -eq 0 ]] && [[ "$DOCKER" -eq 1 ]]; then
		get_time && echo "$TIMESTAMP: Docker existiert bereits. Das Programm wird nicht erneut installiert." >> $LOG
		DOCKER=0
	elif [[ $? -eq 0 ]] && [[ "$DOCKER" -eq 0 ]]; then
		get_time && echo "$TIMESTAMP: Docker existiert bereits." >> $LOG
	else
		get_time && echo "$TIMESTAMP: Docker existiert nicht. Das Programm wird unabhängig der Nutzerwahl installiert." >> $LOG
		DOCKER=1
	fi
	# Prüfe Dependencies
	get_time && echo "$TIMESTAMP: Prüfe Dependencies" >> $LOG
	# Prüfe Network Manager
	command -v "nmcli" >/dev/null 2 >&1
	if [[ $? -eq 0 ]]; then
		get_time && echo "$TIMESTAMP: Networkmanager existiert bereits. Das Programm wird nicht erneut installiert." >> $LOG
		NWM=0
	else
		get_time && echo "$TIMESTAMP: Networkmanager existiert nicht. Wird mitinstalliert." >> $LOG
		NWM=1
	fi
	# Prüfe AppArmor
	command -v "aa-status" >/dev/null 2 >&1
	if [[ $? -eq 0 ]]; then
		get_time && echo "$TIMESTAMP: AppArmor existiert bereits. Das Programm wird nicht erneut installiert." >> $LOG
		APA=0
	else
		get_time && echo "$TIMESTAMP: AppArmor existiert nicht. Wird mitinstalliert." >> $LOG
		APA=1
	fi
	# Prüfe JQ
	command -v "jq" >/dev/null 2 >&1
	if [[ $? -eq 0 ]]; then
		get_time && echo "$TIMESTAMP: JQ existiert bereits. Das Programm wird nicht erneut installiert." >> $LOG
		JQ=0
	else
		get_time && echo "$TIMESTAMP: JQ existiert nicht. Wird mitinstalliert." >> $LOG
		JQ=1
	fi
	# Dependencies Sanity Check...
	if  ( [[ "$NWM" -eq 1 ]] || [[ "$APA" -eq 1 ]] || [[ "$JQ" -eq 1 ]] ) && [[ "$DEPENDENCIES" -eq 0 ]]; then
		get_time && echo "$TIMESTAMP: SANITY-CHECK ERROR! Dependencies fehlen, werden aber nicht angefordert." >> $LOG
		get_time && echo "$TIMESTAMP: Dependencies werden entsprechend installiert." >> $LOG
		DEPENDENCIES=1
	else
		get_time && echo "$TIMESTAMP: SANITY-CHECK erfolgreich." >> $LOG
	fi
	# Prüfe Home Assistant
	get_time && echo "$TIMESTAMP: Prüfe Home Assistant" >> $LOG
	command -v "hassio_cli" >/dev/null 2 >&1
	if [[ $? -eq 0 ]]; then
		get_time && echo "$TIMESTAMP: Home-Assistant existiert bereits. Programm wird nicht neu installiert." >> $LOG
		HOMEASSISTANT=0
	else
		get_time && echo "$TIMESTAMP: Homeassistant existiert nicht. Wird mitinstalliert." >> $LOG
	fi
	return 0
}
# Funktionen für die Switch-Case der Übergabeflags.
set_all () {
	DOCKER=1
	HOMEASSISTANT=1
	UPDATE=1
	DEPENDENCIES=1
	get_time && echo "$TIMESTAMP: Komplettinstallation angefordert." >>$LOG
}
set_docker () {
	DOCKER=1
	get_time && echo "$TIMESTAMP: Docker Installation angefordert." >> $LOG
}
set_homeassistant () {
	HOMEASSISTANT=1
	get_time && echo "$TIMESTAMP: Home Assistant Installation angefordert." >> $LOG		
}
set_update () {
	UPDATE=1
	get_time && echo "$TIMESTAMP: Systemupdate angefordert." >> $LOG		
}
# Haupt-Routine
echo "   Smart Home Zentrale   " >> $LOG
echo "---Installationsskript---" >> $LOG
echo "$STARTTIME" >> $LOG
get_time && echo "$TIMESTAMP: Beginne Installation" >> $LOG
get_piver
get_time && echo "$TIMESTAMP: Lese Eingabeparameter" >> $LOG
while getopts "adhu" option; do
	case ${option} in
		a ) set_all;;
		d ) set_docker;;
		h ) set_homeassistant;;
		u ) set_update;;
		\? ) show_help;;
	esac
done
preflightcheck
if [[ "$UPDATE" -eq 1 ]]; then
	echo "Starte Update"
	run_update
fi
if [[ "$DEPENDENCIES" -eq 1 ]]; then
	echo "Installiere Dependencies"
	install_dependencies
fi
if [[ "$DOCKER" -eq 1 ]]; then
	echo "Installiere Docker"
	install_docker
fi
if [[ "$HOMEASSISTANT" -eq 1 ]]; then
	echo "Installiere Home Assistant"
	install_homeassistant
fi
